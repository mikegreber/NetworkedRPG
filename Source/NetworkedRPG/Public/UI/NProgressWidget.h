// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Blueprint/UserWidget.h"
#include "NProgressWidget.generated.h"

class UTextBlock;
class UProgressBar;

/**
 * 
 */
UCLASS()
class NETWORKEDRPG_API UNProgressWidget : public UUserWidget
{
	GENERATED_BODY()

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 1. Blueprint Settings
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected:
	UPROPERTY(EditAnywhere, Category="Settings")
	bool bAnimate;
	
	UPROPERTY(EditAnywhere, Category="Settings")
	bool bConstantInterpolation;
	
	UPROPERTY(EditAnywhere, Category="Settings")
	float UpInterpSpeed;

	UPROPERTY(EditAnywhere, Category="Settings")
	float DownInterpSpeed;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 2. References and State
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float CurrentValue;
	float TargetValue;
	float MaxValue;
	float InterpSpeed;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 2. Widget Components
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected:
	UPROPERTY(BlueprintReadWrite, meta = (BindWidget))
	UProgressBar* ProgressBar;

	UPROPERTY(BlueprintReadWrite, meta = (BindWidget))
	UTextBlock* PercentText;

	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 3. Overrides
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
protected:
	virtual void NativeConstruct() override;

	virtual void NativeTick(const FGeometry& MyGeometry, float InDeltaTime) override;

	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 3. Interface and Methods
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	/** Sets the percentage of the progress bar. */
	void SetPercentage(float Current, float Max, float IntSpeed = -1.f);

protected:
	/** Called by SetPercentage to set the TargetValue so we can animate to the new value. */
	void SetValue(float InValue);

	/** Called by SetPercentage to set the MaxValue. */
	void SetMaxValue(float InMaxValue);
	
	UFUNCTION()
	void UpdatePercentage(float Current, float Max);
};
